{"version":3,"sources":["data/chatRooms.js","components/Landing/index.jsx","services/firebase.js","context/auth.js","hooks/useAuth.js","components/MessageInput/index.jsx","hooks/useMessages.js","components/MessageList/index.jsx","components/ChatRoom/index.jsx","components/AuthenticatedApp/index.jsx","components/UnauthenticatedApp/index.jsx","App.jsx","index.js"],"names":["chatRooms","id","title","Landing","className","map","room","to","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","loginWithGoogle","provider","GoogleAuthProvider","auth","getAuth","signInWithPopup","user","uid","displayName","code","console","error","roomId","text","addDoc","collection","trim","timestamp","serverTimestamp","sendMessageBot","AuthContext","React","createContext","AuthProvider","props","useState","setUser","login","value","Provider","useAuth","useContext","Error","MessageInput","setValue","message","axios","post","headers","then","response","upres","JSON","stringify","data","classifications","word1","search","word2","res","slice","includes","catch","log","onSubmit","event","preventDefault","sendMessage","callBot","type","placeholder","onChange","target","required","minLength","disabled","useMessages","messages","setMessages","useEffect","unsubscribe","callback","onSnapshot","query","orderBy","querySnapshot","docs","x","getMessages","MessageList","containerRef","useRef","useLayoutEffect","current","scrollTop","scrollHeight","ref","Message","isOwnMessage","join","ChatRoom","params","useParams","find","AuthenticatedApp","path","element","UnauthenticatedApp","onClick","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.174d7f4d.chunk.js","sourcesContent":["const chatRooms = [{ id: \"help\", title: \"Proceed to support chat\" }];\n\nexport { chatRooms };\n","import { Link } from 'react-router-dom';\nimport { chatRooms } from '../../data/chatRooms';\nimport './styles.css';\n\nfunction Landing() {\n    return (\n        <>\n            <h2>Welcome</h2>\n            <p>Please only send ONE message and wait patiently for a response. Please do not include personal information such as phone number, address, full name or order numbers.</p>\n            <ul className=\"chat-room-list\">\n                {chatRooms.map((room) => (\n                    <li key={room.id}>\n                        <Link to={`/room/${room.id}`}>{room.title}</Link>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n}\n\nexport { Landing };\n","import { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, signInWithPopup, getAuth } from \"firebase/auth\";\nimport {\n  getFirestore,\n  collection,\n  addDoc,\n  serverTimestamp,\n  onSnapshot,\n  query,\n  orderBy,\n} from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA9yCoGjoFAlvs3fNBOAYTsXcN86nCpOYY\",\n  authDomain: \"chatjoabuttdev.firebaseapp.com\",\n  projectId: \"chatjoabuttdev\",\n  storageBucket: \"chatjoabuttdev.appspot.com\",\n  messagingSenderId: \"479546095872\",\n  appId: \"1:479546095872:web:3ebae01123ae2a6d09dbe5\",\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nasync function loginWithGoogle() {\n  try {\n    const provider = new GoogleAuthProvider();\n    const auth = getAuth();\n\n    const { user } = await signInWithPopup(auth, provider);\n\n    return { uid: user.uid, displayName: user.displayName };\n  } catch (error) {\n    if (error.code !== \"auth/cancelled-popup-request\") {\n      console.error(error);\n    }\n    return null;\n  }\n}\n\nasync function sendMessage(roomId, user, text) {\n  try {\n    await addDoc(collection(db, \"chat-rooms\", roomId, \"messages\"), {\n      uid: user.uid,\n      displayName: user.displayName,\n      text: text.trim(),\n      timestamp: serverTimestamp(),\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction getMessages(roomId, callback) {\n  return onSnapshot(\n    query(\n      collection(db, \"chat-rooms\", roomId, \"messages\"),\n      orderBy(\"timestamp\", \"asc\")\n    ),\n    (querySnapshot) => {\n      const messages = querySnapshot.docs.map((x) => ({\n        id: x.id,\n        ...x.data(),\n      }));\n\n      callback(messages);\n    }\n  );\n}\n\nasync function sendMessageBot(roomId, text) {\n  try {\n    await addDoc(collection(db, \"chat-rooms\", roomId, \"messages\"), {\n      uid: \"bPiif3D8nGPqDT3EDjNeggIkzSy2\",\n      displayName: \"Chatty Businessman\",\n      text: text.trim(),\n      timestamp: serverTimestamp(),\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport { loginWithGoogle, sendMessage, getMessages, sendMessageBot };\n","import React from 'react';\nimport { loginWithGoogle } from '../services/firebase';\n\nconst AuthContext = React.createContext();\n\nconst AuthProvider = (props) => {\n    const [user, setUser] = React.useState(null);\n\n    const login = async () => {\n        const user = await loginWithGoogle();\n        if (!user) {\n            // TODO: Handle failed login\n        }\n\n        setUser(user);\n    };\n\n    const value = { user, login };\n\n    return <AuthContext.Provider value={value} {...props} />;\n};\n\nexport { AuthContext, AuthProvider };\n","import React from 'react';\nimport { AuthContext } from '../context/auth';\n\nfunction useAuth() {\n    const value = React.useContext(AuthContext);\n    if (!value) {\n        throw new Error(\"AuthContext's value is undefined.\");\n    }\n\n    return value;\n}\n\nexport { useAuth };\n","import React from \"react\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { sendMessage, sendMessageBot } from \"../../services/firebase\";\nimport \"./styles.css\";\nimport axios from \"axios\"\n\n\n\n\nfunction MessageInput({ roomId }) {\n  const { user } = useAuth();\n  const [value, setValue] = React.useState(\"\");\n\n async function callBot(){\n\n    let message = value;\n\nconst trackOrder = \"To track your order, please go to insertname.com and enter your order number.\"\nconst shippingPolicy = \"We ship to anywhere internationally besides insertNotIncludedCountries. Shipping usually takes 1-2 weeks.\"\nconst refunds = \"We allow refunds, exchange and returns only within two weeks on the item being delivered and you must still have your order id. To start a refund, return or exchange request, email insertemail@insert.com\"\naxios.post(\n    'https://api.cohere.ai/classify',\n    // '{\\n    \"model\": \"large\",\\n    \"inputs\": [\"Am I still able to return my order?\", \"When can I expect my package?\"],\\n    \"examples\": [{\"text\": \"Do you offer same day shipping?\", \"label\": \"Shipping and handling policy\"}, {\"text\": \"Can you ship to Italy?\", \"label\": \"Shipping and handling policy\"}, {\"text\": \"How long does shipping take?\", \"label\": \"Shipping and handling policy\"}, {\"text\": \"Can I buy online and pick up in store?\", \"label\": \"Shipping and handling policy\"}, {\"text\": \"What are your shipping options?\", \"label\": \"Shipping and handling policy\"}, {\"text\": \"My order arrived damaged, can I get a refund?\", \"label\": \"Start return or exchange\"}, {\"text\": \"You sent me the wrong item\", \"label\": \"Start return or exchange\"}, {\"text\": \"I want to exchange my item for another colour\", \"label\": \"Start return or exchange\"}, {\"text\": \"I ordered something and it wasn\\u2019t what I expected. Can I return it?\", \"label\": \"Start return or exchange\"}, {\"text\": \"What\\u2019s your return policy?\", \"label\": \"Start return or exchange\"}, {\"text\": \"Where\\u2019s my package?\", \"label\": \"Track order\"}, {\"text\": \"When will my order arrive?\", \"label\": \"Track order\"}, {\"text\": \"What\\u2019s my shipping number?\", \"label\": \"Track order\"}, {\"text\": \"Which carrier is my package with?\", \"label\": \"Track order\"}, {\"text\": \"Is my package delayed?\", \"label\": \"Track order\"}]\\n  }',\n    {\n        'model': 'large',\n        'inputs': [\n          message\n        ],\n        'examples': [\n            {\n                'text': 'Do you offer same day shipping?',\n                'label': 'Shipping and handling policy'\n            },\n            {\n                'text': 'Can you ship to Italy?',\n                'label': 'Shipping and handling policy'\n            },\n            {\n                'text': 'How long does shipping take?',\n                'label': 'Shipping and handling policy'\n            },\n            {\n                'text': 'Can I buy online and pick up in store?',\n                'label': 'Shipping and handling policy'\n            },\n            {\n                'text': 'What are your shipping options?',\n                'label': 'Shipping and handling policy'\n            },\n            {\n                'text': 'My order arrived damaged, can I get a refund?',\n                'label': 'Start return or exchange'\n            },\n            {\n                'text': 'You sent me the wrong item',\n                'label': 'Start return or exchange'\n            },\n            {\n                'text': 'I want to exchange my item for another colour',\n                'label': 'Start return or exchange'\n            },\n            {\n                'text': 'I ordered something and it wasn\\u2019t what I expected. Can I return it?',\n                'label': 'Start return or exchange'\n            },\n            {\n                'text': 'What\\u2019s your return policy?',\n                'label': 'Start return or exchange'\n            },\n            {\n                'text': 'Where\\u2019s my package?',\n                'label': 'Track order'\n            },\n            {\n                'text': 'When will my order arrive?',\n                'label': 'Track order'\n            },\n            {\n                'text': 'What\\u2019s my shipping number?',\n                'label': 'Track order'\n            },\n            {\n                'text': 'Which carrier is my package with?',\n                'label': 'Track order'\n            },\n            {\n                'text': 'Is my package delayed?',\n                'label': 'Track order'\n            }\n        ]\n    },\n    {\n        headers: {\n            'Authorization': 'BEARER gorDToBtztoyZFNIXY8g5LdEXiYO17TeKYGA8deP',\n            'Content-Type': 'application/json'\n        }\n    }\n).then(function (response) {\n\n\n  const upres = JSON.stringify(response.data.classifications)\n  const word1 = upres.search(\"prediction\")\n  const word2 = upres.search(\"confidences\")\n  const res = upres.slice(word1, word2)\n  \n  if (res.includes(\"Track order\")){\n    sendMessageBot(\"help\", trackOrder)\n  } else if (res.includes(\"Start return or exchange\")){\n      sendMessageBot(\"help\", refunds)\n  } else if (res.includes(\"Shipping and handling policy\")){\n    sendMessageBot(\"help\", shippingPolicy)\n  }\n\n\n})\n.catch(function (error) {\n  console.log(error);\n});\n\n}\n\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    sendMessage(roomId, user, value);\n    setValue(\"\");\n    callBot()\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"message-input-container\">\n      <input\n        type=\"text\"\n        placeholder=\"Enter a message\"\n        value={value}\n        onChange={handleChange}\n        className=\"message-input\"\n        required\n        minLength={1}\n      />\n      <button type=\"submit\" disabled={value < 1} className=\"send-message\">\n        Send\n      </button>\n    </form>\n  );\n\n}\nexport { MessageInput };\n\n","import React from 'react';\nimport { getMessages } from '../services/firebase';\n\nfunction useMessages(roomId) {\n    const [messages, setMessages] = React.useState([]);\n\n    React.useEffect(() => {\n        const unsubscribe = getMessages(roomId, setMessages);\n\n        return unsubscribe;\n    }, [roomId]);\n\n    return messages;\n}\n\nexport { useMessages };\n","import React from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useMessages } from '../../hooks/useMessages';\nimport './styles.css';\n\nfunction MessageList({ roomId }) {\n    const containerRef = React.useRef(null);\n    const { user } = useAuth();\n    const messages = useMessages(roomId);\n\n    React.useLayoutEffect(() => {\n        if (containerRef.current) {\n            containerRef.current.scrollTop = containerRef.current.scrollHeight;\n        }\n    });\n\n    return (\n        <div className=\"message-list-container\" ref={containerRef}>\n            <ul className=\"message-list\">\n                {messages.map((x) => (\n                    <Message\n                        key={x.id}\n                        message={x}\n                        isOwnMessage={x.uid === user.uid}\n                    />\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nfunction Message({ message, isOwnMessage }) {\n    const { displayName, text } = message;\n\n    return (\n        <li className={['message', isOwnMessage && 'own-message'].join(' ')}>\n            <h4 className=\"sender\">{isOwnMessage ? 'You' : displayName}</h4>\n            <div>{text}</div>\n        </li>\n    );\n}\n\nexport { MessageList };\n","import { useParams } from 'react-router-dom';\nimport { chatRooms } from '../../data/chatRooms';\nimport { MessageInput } from '../MessageInput';\nimport { MessageList } from '../MessageList';\nimport './styles.css';\n\n\n\nfunction ChatRoom() {\n    const params = useParams();\n\n    const room = chatRooms.find((x) => x.id === params.id);\n    if (!room) {\n        // TODO: 404\n    }\n\n    return (\n        <>\n            <h2>Support Chat. Powered By CBMen</h2>\n            <div>\n                <p>Please only send ONE message and wait patiently for a response. Please do not include personal information such as phone number, address, full name or order numbers.</p>\n\n            </div>\n            <div className=\"messages-container\">\n                <MessageList roomId={room.id} />\n                <MessageInput roomId={room.id} />\n            </div>\n        </>\n    );\n}\n\nexport { ChatRoom };\n","import { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { Landing } from '../Landing';\nimport { ChatRoom } from '../ChatRoom';\n\nfunction AuthenticatedApp() {\n    return (\n        <BrowserRouter>\n            <Routes>\n                <Route path=\"/\" element={<Landing />} />\n                <Route path=\"/room/:id\" element={<ChatRoom />} />\n            </Routes>\n        </BrowserRouter>\n    );\n}\n\nexport { AuthenticatedApp };\n","import { useAuth } from '../../hooks/useAuth';\nimport './styles.css';\n\nfunction UnauthenticatedApp() {\n    const { login } = useAuth();\n\n    return (\n        <>\n            <h2>Log in to join a chat room!</h2>\n            <div>\n                <button onClick={login} className=\"login\">\n                    Login with Google\n                </button>\n            </div>\n        </>\n    );\n}\n\nexport { UnauthenticatedApp };\n","import { AuthenticatedApp } from './components/AuthenticatedApp';\nimport { UnauthenticatedApp } from './components/UnauthenticatedApp';\nimport { useAuth } from './hooks/useAuth';\nimport './App.css';\n\nfunction App() {\n    const { user } = useAuth();\n\n    return (\n        <div className=\"container\">\n            <h1>Support Chat Room</h1>\n            {user ? <AuthenticatedApp /> : <UnauthenticatedApp />}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { AuthProvider } from './context/auth';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <AuthProvider>\n        <App />\n    </AuthProvider>\n);\n"],"sourceRoot":""}